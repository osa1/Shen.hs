"**********************************************************************************
*                           The License						                                      *
* 										                                                                  *
* The user is free to produce commercial applications with the software, to 	          *
* distribute these applications in source or binary  form, and to charge monies         *
* for them as he sees fit and in concordance with the laws of the land subject 	        *
* to the following license.							                                                *
*										                                                                    * 
* 1. The license applies to all the software and all derived software and 	            *
*    must appear on such.							                                                  *
*										                                                                    *
* 2. It is illegal to distribute the software without this license attached	            *
*    to it and use of the software implies agreement with the license as such.          *
*    It is illegal for anyone who is not the copyright holder to tamper with 	          *
*    or change the license.							                                                *
*										                                                                    *
* 3. Neither the names of Lambda Associates or the copyright holder may be used         *
*    to endorse or promote products built using the software without specific 	        *
*    prior written permission from the copyright holder.		                            *
*										                                                                    *
* 4. That possession of this license does not confer on the copyright holder 	          *
*    any special contractual obligation towards the user. That in no event 	            * 
*    shall the copyright holder be liable for any direct, indirect, incidental,        *   
*    special, exemplary or consequential damages (including but not limited             *
*    to procurement of substitute goods or services, loss of use, data, 	              * 
*    interruption), however caused and on any theory of liability, whether in	          * 
*    contract, strict liability or tort (including negligence) arising in any         	*
*    way out of the use of the software, even if advised of the possibility of         	*
*    such damage.						                                                        		* 
*										                                                                    *
* 5. It is permitted for the user to change the software, for the purpose of 	          *
*    improving performance, correcting an error, or porting to a new platform, 	        *
*    and distribute the derived version of Shen provided the resulting program 	        *
*    conforms in all respects to the Shen standard and is issued under that             * 
*    title. The user must make it clear with his distribution that he/she is 	          *
*    the author of the changes and what these changes are and why. 		                  *
*										                                                                    *
* 6. Derived versions of this software in whatever form are subject to the same         *
*    restrictions. In particular it is not permitted to make derived copies of          *
*    this software which do not conform to the Shen standard or appear under a          *
*    different title.								                                                    *
*										                                                                    *
*    It is permitted to distribute versions of Shen which incorporate libraries,        *
*    graphics or other facilities which are not part of the Shen standard.	            *
*										                                                                    *
* For an explication of this license see www.shenlanguage.org/license.htm which         *
* explains this license in full.                                                        *
*				 						                                                                    *
*****************************************************************************************
"(defun print (V2238) (let String (shen.insert V2238 "~S") (let Print (shen.prhush String (stoutput)) V2238)))

(defun shen.prhush (V2239 V2240) (if (value *hush*) V2239 (pr V2239 V2240)))

(defun shen.mkstr (V2241 V2242) (cond ((string? V2241) (shen.mkstr-l (shen.proc-nl V2241) V2242)) (true (shen.mkstr-r (cons shen.proc-nl (cons V2241 ())) V2242))))

(defun shen.mkstr-l (V2243 V2244) (cond ((= () V2244) V2243) ((cons? V2244) (shen.mkstr-l (shen.insert-l (hd V2244) V2243) (tl V2244))) (true (shen.sys-error shen.mkstr-l))))

(defun shen.insert-l (V2247 V2248) (cond ((= "" V2248) "") ((and (shen.+string? V2248) (and (= "~" (pos V2248 0)) (and (shen.+string? (tlstr V2248)) (= "A" (pos (tlstr V2248) 0))))) (cons shen.app (cons V2247 (cons (tlstr (tlstr V2248)) (cons shen.a ()))))) ((and (shen.+string? V2248) (and (= "~" (pos V2248 0)) (and (shen.+string? (tlstr V2248)) (= "R" (pos (tlstr V2248) 0))))) (cons shen.app (cons V2247 (cons (tlstr (tlstr V2248)) (cons shen.r ()))))) ((and (shen.+string? V2248) (and (= "~" (pos V2248 0)) (and (shen.+string? (tlstr V2248)) (= "S" (pos (tlstr V2248) 0))))) (cons shen.app (cons V2247 (cons (tlstr (tlstr V2248)) (cons shen.s ()))))) ((shen.+string? V2248) (shen.factor-cn (cons cn (cons (pos V2248 0) (cons (shen.insert-l V2247 (tlstr V2248)) ()))))) ((and (cons? V2248) (and (= cn (hd V2248)) (and (cons? (tl V2248)) (and (cons? (tl (tl V2248))) (= () (tl (tl (tl V2248)))))))) (cons cn (cons (hd (tl V2248)) (cons (shen.insert-l V2247 (hd (tl (tl V2248)))) ())))) ((and (cons? V2248) (and (= shen.app (hd V2248)) (and (cons? (tl V2248)) (and (cons? (tl (tl V2248))) (and (cons? (tl (tl (tl V2248)))) (= () (tl (tl (tl (tl V2248)))))))))) (cons shen.app (cons (hd (tl V2248)) (cons (shen.insert-l V2247 (hd (tl (tl V2248)))) (tl (tl (tl V2248))))))) (true (shen.sys-error shen.insert-l))))

(defun shen.factor-cn (V2249) (cond ((and (cons? V2249) (and (= cn (hd V2249)) (and (cons? (tl V2249)) (and (cons? (tl (tl V2249))) (and (cons? (hd (tl (tl V2249)))) (and (= cn (hd (hd (tl (tl V2249))))) (and (cons? (tl (hd (tl (tl V2249))))) (and (cons? (tl (tl (hd (tl (tl V2249)))))) (and (= () (tl (tl (tl (hd (tl (tl V2249))))))) (and (= () (tl (tl (tl V2249)))) (and (string? (hd (tl V2249))) (string? (hd (tl (hd (tl (tl V2249))))))))))))))))) (cons cn (cons (cn (hd (tl V2249)) (hd (tl (hd (tl (tl V2249)))))) (tl (tl (hd (tl (tl V2249)))))))) (true V2249)))

(defun shen.proc-nl (V2250) (cond ((= "" V2250) "") ((and (shen.+string? V2250) (and (= "~" (pos V2250 0)) (and (shen.+string? (tlstr V2250)) (= "%" (pos (tlstr V2250) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V2250))))) ((shen.+string? V2250) (cn (pos V2250 0) (shen.proc-nl (tlstr V2250)))) (true (shen.sys-error shen.proc-nl))))

(defun shen.mkstr-r (V2251 V2252) (cond ((= () V2252) V2251) ((cons? V2252) (shen.mkstr-r (cons shen.insert (cons (hd V2252) (cons V2251 ()))) (tl V2252))) (true (shen.sys-error shen.mkstr-r))))

(defun shen.insert (V2253 V2254) (shen.insert-h V2253 V2254 ""))

(defun shen.insert-h (V2257 V2258 V2259) (cond ((= "" V2258) V2259) ((and (shen.+string? V2258) (and (= "~" (pos V2258 0)) (and (shen.+string? (tlstr V2258)) (= "A" (pos (tlstr V2258) 0))))) (cn V2259 (shen.app V2257 (tlstr (tlstr V2258)) shen.a))) ((and (shen.+string? V2258) (and (= "~" (pos V2258 0)) (and (shen.+string? (tlstr V2258)) (= "R" (pos (tlstr V2258) 0))))) (cn V2259 (shen.app V2257 (tlstr (tlstr V2258)) shen.r))) ((and (shen.+string? V2258) (and (= "~" (pos V2258 0)) (and (shen.+string? (tlstr V2258)) (= "S" (pos (tlstr V2258) 0))))) (cn V2259 (shen.app V2257 (tlstr (tlstr V2258)) shen.s))) ((shen.+string? V2258) (shen.insert-h V2257 (tlstr V2258) (cn V2259 (pos V2258 0)))) (true (shen.sys-error shen.insert-h))))

(defun shen.app (V2260 V2261 V2262) (cn (shen.arg->str V2260 V2262) V2261))

(defun shen.arg->str (V2268 V2269) (cond ((= V2268 (fail)) "...") ((shen.list? V2268) (shen.list->str V2268 V2269)) ((string? V2268) (shen.str->str V2268 V2269)) ((absvector? V2268) (shen.vector->str V2268 V2269)) (true (shen.atom->str V2268))))

(defun shen.list->str (V2270 V2271) (cond ((= shen.r V2271) (@s "(" (@s (shen.iter-list V2270 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V2270 V2271 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V2282 V2283 V2284) (cond ((= () V2282) "") ((= 0 V2284) "... etc") ((and (cons? V2282) (= () (tl V2282))) (shen.arg->str (hd V2282) V2283)) ((cons? V2282) (@s (shen.arg->str (hd V2282) V2283) (@s " " (shen.iter-list (tl V2282) V2283 (- V2284 1))))) (true (@s "|" (@s " " (shen.arg->str V2282 V2283))))))

(defun shen.str->str (V2289 V2290) (cond ((= shen.a V2290) V2289) (true (@s (n->string 34) (@s V2289 (n->string 34))))))

(defun shen.vector->str (V2291 V2292) (if (shen.print-vector? V2291) ((<-address V2291 0) V2291) (if (vector? V2291) (@s "<" (@s (shen.iter-vector V2291 1 V2292 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V2291 0 V2292 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V2293) (let Zero (<-address V2293 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V2294) (trap-error (do (ps V2294) true) (lambda E false)))

(defun shen.tuple (V2295) (cn "(@p " (shen.app (<-address V2295 1) (cn " " (shen.app (<-address V2295 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V2302 V2303 V2304 V2305) (cond ((= 0 V2305) "... etc") (true (let Item (trap-error (<-address V2302 V2303) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V2302 (+ V2303 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V2304) (@s (shen.arg->str Item V2304) (@s " " (shen.iter-vector V2302 (+ V2303 1) V2304 (- V2305 1)))))))))))

(defun shen.atom->str (V2306) (trap-error (str V2306) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V2307) (or (empty? V2307) (cons? V2307)))



