"**********************************************************************************
*                           The License						                                      *
* 										                                                                  *
* The user is free to produce commercial applications with the software, to 	          *
* distribute these applications in source or binary  form, and to charge monies         *
* for them as he sees fit and in concordance with the laws of the land subject 	        *
* to the following license.							                                                *
*										                                                                    * 
* 1. The license applies to all the software and all derived software and 	            *
*    must appear on such.							                                                  *
*										                                                                    *
* 2. It is illegal to distribute the software without this license attached	            *
*    to it and use of the software implies agreement with the license as such.          *
*    It is illegal for anyone who is not the copyright holder to tamper with 	          *
*    or change the license.							                                                *
*										                                                                    *
* 3. Neither the names of Lambda Associates or the copyright holder may be used         *
*    to endorse or promote products built using the software without specific 	        *
*    prior written permission from the copyright holder.		                            *
*										                                                                    *
* 4. That possession of this license does not confer on the copyright holder 	          *
*    any special contractual obligation towards the user. That in no event 	            * 
*    shall the copyright holder be liable for any direct, indirect, incidental,        *   
*    special, exemplary or consequential damages (including but not limited             *
*    to procurement of substitute goods or services, loss of use, data, 	              * 
*    interruption), however caused and on any theory of liability, whether in	          * 
*    contract, strict liability or tort (including negligence) arising in any         	*
*    way out of the use of the software, even if advised of the possibility of         	*
*    such damage.						                                                        		* 
*										                                                                    *
* 5. It is permitted for the user to change the software, for the purpose of 	          *
*    improving performance, correcting an error, or porting to a new platform, 	        *
*    and distribute the derived version of Shen provided the resulting program 	        *
*    conforms in all respects to the Shen standard and is issued under that             * 
*    title. The user must make it clear with his distribution that he/she is 	          *
*    the author of the changes and what these changes are and why. 		                  *
*										                                                                    *
* 6. Derived versions of this software in whatever form are subject to the same         *
*    restrictions. In particular it is not permitted to make derived copies of          *
*    this software which do not conform to the Shen standard or appear under a          *
*    different title.								                                                    *
*										                                                                    *
*    It is permitted to distribute versions of Shen which incorporate libraries,        *
*    graphics or other facilities which are not part of the Shen standard.	            *
*										                                                                    *
* For an explication of this license see www.shenlanguage.org/license.htm which         *
* explains this license in full.                                                        *
*				 						                                                                    *
*****************************************************************************************
"(defun print (V2210) (let String (shen.insert V2210 "~S") (let Print (shen.prhush String (stoutput)) V2210)))

(defun shen.prhush (V2211 V2212) (if (value *hush*) V2211 (pr V2211 V2212)))

(defun shen.mkstr (V2213 V2214) (cond ((string? V2213) (shen.mkstr-l (shen.proc-nl V2213) V2214)) (true (shen.mkstr-r (cons shen.proc-nl (cons V2213 ())) V2214))))

(defun shen.mkstr-l (V2215 V2216) (cond ((= () V2216) V2215) ((cons? V2216) (shen.mkstr-l (shen.insert-l (hd V2216) V2215) (tl V2216))) (true (shen.sys-error shen.mkstr-l))))

(defun shen.insert-l (V2219 V2220) (cond ((= "" V2220) "") ((and (shen.+string? V2220) (and (= "~" (pos V2220 0)) (and (shen.+string? (tlstr V2220)) (= "A" (pos (tlstr V2220) 0))))) (cons shen.app (cons V2219 (cons (tlstr (tlstr V2220)) (cons shen.a ()))))) ((and (shen.+string? V2220) (and (= "~" (pos V2220 0)) (and (shen.+string? (tlstr V2220)) (= "R" (pos (tlstr V2220) 0))))) (cons shen.app (cons V2219 (cons (tlstr (tlstr V2220)) (cons shen.r ()))))) ((and (shen.+string? V2220) (and (= "~" (pos V2220 0)) (and (shen.+string? (tlstr V2220)) (= "S" (pos (tlstr V2220) 0))))) (cons shen.app (cons V2219 (cons (tlstr (tlstr V2220)) (cons shen.s ()))))) ((shen.+string? V2220) (shen.factor-cn (cons cn (cons (pos V2220 0) (cons (shen.insert-l V2219 (tlstr V2220)) ()))))) ((and (cons? V2220) (and (= cn (hd V2220)) (and (cons? (tl V2220)) (and (cons? (tl (tl V2220))) (= () (tl (tl (tl V2220)))))))) (cons cn (cons (hd (tl V2220)) (cons (shen.insert-l V2219 (hd (tl (tl V2220)))) ())))) ((and (cons? V2220) (and (= shen.app (hd V2220)) (and (cons? (tl V2220)) (and (cons? (tl (tl V2220))) (and (cons? (tl (tl (tl V2220)))) (= () (tl (tl (tl (tl V2220)))))))))) (cons shen.app (cons (hd (tl V2220)) (cons (shen.insert-l V2219 (hd (tl (tl V2220)))) (tl (tl (tl V2220))))))) (true (shen.sys-error shen.insert-l))))

(defun shen.factor-cn (V2221) (cond ((and (cons? V2221) (and (= cn (hd V2221)) (and (cons? (tl V2221)) (and (cons? (tl (tl V2221))) (and (cons? (hd (tl (tl V2221)))) (and (= cn (hd (hd (tl (tl V2221))))) (and (cons? (tl (hd (tl (tl V2221))))) (and (cons? (tl (tl (hd (tl (tl V2221)))))) (and (= () (tl (tl (tl (hd (tl (tl V2221))))))) (and (= () (tl (tl (tl V2221)))) (and (string? (hd (tl V2221))) (string? (hd (tl (hd (tl (tl V2221))))))))))))))))) (cons cn (cons (cn (hd (tl V2221)) (hd (tl (hd (tl (tl V2221)))))) (tl (tl (hd (tl (tl V2221)))))))) (true V2221)))

(defun shen.proc-nl (V2222) (cond ((= "" V2222) "") ((and (shen.+string? V2222) (and (= "~" (pos V2222 0)) (and (shen.+string? (tlstr V2222)) (= "%" (pos (tlstr V2222) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V2222))))) ((shen.+string? V2222) (cn (pos V2222 0) (shen.proc-nl (tlstr V2222)))) (true (shen.sys-error shen.proc-nl))))

(defun shen.mkstr-r (V2223 V2224) (cond ((= () V2224) V2223) ((cons? V2224) (shen.mkstr-r (cons shen.insert (cons (hd V2224) (cons V2223 ()))) (tl V2224))) (true (shen.sys-error shen.mkstr-r))))

(defun shen.insert (V2225 V2226) (shen.insert-h V2225 V2226 ""))

(defun shen.insert-h (V2229 V2230 V2231) (cond ((= "" V2230) V2231) ((and (shen.+string? V2230) (and (= "~" (pos V2230 0)) (and (shen.+string? (tlstr V2230)) (= "A" (pos (tlstr V2230) 0))))) (cn V2231 (shen.app V2229 (tlstr (tlstr V2230)) shen.a))) ((and (shen.+string? V2230) (and (= "~" (pos V2230 0)) (and (shen.+string? (tlstr V2230)) (= "R" (pos (tlstr V2230) 0))))) (cn V2231 (shen.app V2229 (tlstr (tlstr V2230)) shen.r))) ((and (shen.+string? V2230) (and (= "~" (pos V2230 0)) (and (shen.+string? (tlstr V2230)) (= "S" (pos (tlstr V2230) 0))))) (cn V2231 (shen.app V2229 (tlstr (tlstr V2230)) shen.s))) ((shen.+string? V2230) (shen.insert-h V2229 (tlstr V2230) (cn V2231 (pos V2230 0)))) (true (shen.sys-error shen.insert-h))))

(defun shen.app (V2232 V2233 V2234) (cn (shen.arg->str V2232 V2234) V2233))

(defun shen.arg->str (V2240 V2241) (cond ((= V2240 (fail)) "...") ((shen.list? V2240) (shen.list->str V2240 V2241)) ((string? V2240) (shen.str->str V2240 V2241)) ((absvector? V2240) (shen.vector->str V2240 V2241)) (true (shen.atom->str V2240))))

(defun shen.list->str (V2242 V2243) (cond ((= shen.r V2243) (@s "(" (@s (shen.iter-list V2242 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V2242 V2243 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V2254 V2255 V2256) (cond ((= () V2254) "") ((= 0 V2256) "... etc") ((and (cons? V2254) (= () (tl V2254))) (shen.arg->str (hd V2254) V2255)) ((cons? V2254) (@s (shen.arg->str (hd V2254) V2255) (@s " " (shen.iter-list (tl V2254) V2255 (- V2256 1))))) (true (@s "|" (@s " " (shen.arg->str V2254 V2255))))))

(defun shen.str->str (V2261 V2262) (cond ((= shen.a V2262) V2261) (true (@s (n->string 34) (@s V2261 (n->string 34))))))

(defun shen.vector->str (V2263 V2264) (if (shen.print-vector? V2263) ((<-address V2263 0) V2263) (if (vector? V2263) (@s "<" (@s (shen.iter-vector V2263 1 V2264 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V2263 0 V2264 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V2265) (let Zero (<-address V2265 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V2266) (trap-error (do (ps V2266) true) (lambda E false)))

(defun shen.tuple (V2267) (cn "(@p " (shen.app (<-address V2267 1) (cn " " (shen.app (<-address V2267 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V2274 V2275 V2276 V2277) (cond ((= 0 V2277) "... etc") (true (let Item (trap-error (<-address V2274 V2275) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V2274 (+ V2275 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V2276) (@s (shen.arg->str Item V2276) (@s " " (shen.iter-vector V2274 (+ V2275 1) V2276 (- V2277 1)))))))))))

(defun shen.atom->str (V2278) (trap-error (str V2278) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V2279) (or (empty? V2279) (cons? V2279)))



