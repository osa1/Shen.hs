"**********************************************************************************
*                           The License						                                      *
* 										                                                                  *
* The user is free to produce commercial applications with the software, to 	          *
* distribute these applications in source or binary  form, and to charge monies         *
* for them as he sees fit and in concordance with the laws of the land subject 	        *
* to the following license.							                                                *
*										                                                                    * 
* 1. The license applies to all the software and all derived software and 	            *
*    must appear on such.							                                                  *
*										                                                                    *
* 2. It is illegal to distribute the software without this license attached	            *
*    to it and use of the software implies agreement with the license as such.          *
*    It is illegal for anyone who is not the copyright holder to tamper with 	          *
*    or change the license.							                                                *
*										                                                                    *
* 3. Neither the names of Lambda Associates or the copyright holder may be used         *
*    to endorse or promote products built using the software without specific 	        *
*    prior written permission from the copyright holder.		                            *
*										                                                                    *
* 4. That possession of this license does not confer on the copyright holder 	          *
*    any special contractual obligation towards the user. That in no event 	            * 
*    shall the copyright holder be liable for any direct, indirect, incidental,        *   
*    special, exemplary or consequential damages (including but not limited             *
*    to procurement of substitute goods or services, loss of use, data, 	              * 
*    interruption), however caused and on any theory of liability, whether in	          * 
*    contract, strict liability or tort (including negligence) arising in any         	*
*    way out of the use of the software, even if advised of the possibility of         	*
*    such damage.						                                                        		* 
*										                                                                    *
* 5. It is permitted for the user to change the software, for the purpose of 	          *
*    improving performance, correcting an error, or porting to a new platform, 	        *
*    and distribute the derived version of Shen provided the resulting program 	        *
*    conforms in all respects to the Shen standard and is issued under that             * 
*    title. The user must make it clear with his distribution that he/she is 	          *
*    the author of the changes and what these changes are and why. 		                  *
*										                                                                    *
* 6. Derived versions of this software in whatever form are subject to the same         *
*    restrictions. In particular it is not permitted to make derived copies of          *
*    this software which do not conform to the Shen standard or appear under a          *
*    different title.								                                                    *
*										                                                                    *
*    It is permitted to distribute versions of Shen which incorporate libraries,        *
*    graphics or other facilities which are not part of the Shen standard.	            *
*										                                                                    *
* For an explication of this license see www.shenlanguage.org/license.htm which         *
* explains this license in full.                                                        *
*				 						                                                                    *
*****************************************************************************************
"(defun print (V2179) (let String (shen.insert V2179 "~S") (let Print (pr String (stoutput)) V2179)))

(defun shen.mkstr (V2180 V2181) (cond ((string? V2180) (shen.mkstr-l (shen.proc-nl V2180) V2181)) (true (shen.mkstr-r (cons shen.proc-nl (cons V2180 ())) V2181))))

(defun shen.mkstr-l (V2182 V2183) (cond ((= () V2183) V2182) ((cons? V2183) (shen.mkstr-l (shen.insert-l (hd V2183) V2182) (tl V2183))) (true (shen.sys-error shen.mkstr-l))))

(defun shen.insert-l (V2186 V2187) (cond ((= "" V2187) "") ((and (shen.+string? V2187) (and (= "~" (pos V2187 0)) (and (shen.+string? (tlstr V2187)) (= "A" (pos (tlstr V2187) 0))))) (cons shen.app (cons V2186 (cons (tlstr (tlstr V2187)) (cons shen.a ()))))) ((and (shen.+string? V2187) (and (= "~" (pos V2187 0)) (and (shen.+string? (tlstr V2187)) (= "R" (pos (tlstr V2187) 0))))) (cons shen.app (cons V2186 (cons (tlstr (tlstr V2187)) (cons shen.r ()))))) ((and (shen.+string? V2187) (and (= "~" (pos V2187 0)) (and (shen.+string? (tlstr V2187)) (= "S" (pos (tlstr V2187) 0))))) (cons shen.app (cons V2186 (cons (tlstr (tlstr V2187)) (cons shen.s ()))))) ((shen.+string? V2187) (shen.factor-cn (cons cn (cons (pos V2187 0) (cons (shen.insert-l V2186 (tlstr V2187)) ()))))) ((and (cons? V2187) (and (= cn (hd V2187)) (and (cons? (tl V2187)) (and (cons? (tl (tl V2187))) (= () (tl (tl (tl V2187)))))))) (cons cn (cons (hd (tl V2187)) (cons (shen.insert-l V2186 (hd (tl (tl V2187)))) ())))) ((and (cons? V2187) (and (= shen.app (hd V2187)) (and (cons? (tl V2187)) (and (cons? (tl (tl V2187))) (and (cons? (tl (tl (tl V2187)))) (= () (tl (tl (tl (tl V2187)))))))))) (cons shen.app (cons (hd (tl V2187)) (cons (shen.insert-l V2186 (hd (tl (tl V2187)))) (tl (tl (tl V2187))))))) (true (shen.sys-error shen.insert-l))))

(defun shen.factor-cn (V2188) (cond ((and (cons? V2188) (and (= cn (hd V2188)) (and (cons? (tl V2188)) (and (cons? (tl (tl V2188))) (and (cons? (hd (tl (tl V2188)))) (and (= cn (hd (hd (tl (tl V2188))))) (and (cons? (tl (hd (tl (tl V2188))))) (and (cons? (tl (tl (hd (tl (tl V2188)))))) (and (= () (tl (tl (tl (hd (tl (tl V2188))))))) (and (= () (tl (tl (tl V2188)))) (and (string? (hd (tl V2188))) (string? (hd (tl (hd (tl (tl V2188))))))))))))))))) (cons cn (cons (cn (hd (tl V2188)) (hd (tl (hd (tl (tl V2188)))))) (tl (tl (hd (tl (tl V2188)))))))) (true V2188)))

(defun shen.proc-nl (V2189) (cond ((= "" V2189) "") ((and (shen.+string? V2189) (and (= "~" (pos V2189 0)) (and (shen.+string? (tlstr V2189)) (= "%" (pos (tlstr V2189) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V2189))))) ((shen.+string? V2189) (cn (pos V2189 0) (shen.proc-nl (tlstr V2189)))) (true (shen.sys-error shen.proc-nl))))

(defun shen.mkstr-r (V2190 V2191) (cond ((= () V2191) V2190) ((cons? V2191) (shen.mkstr-r (cons shen.insert (cons (hd V2191) (cons V2190 ()))) (tl V2191))) (true (shen.sys-error shen.mkstr-r))))

(defun shen.insert (V2192 V2193) (shen.insert-h V2192 V2193 ""))

(defun shen.insert-h (V2196 V2197 V2198) (cond ((= "" V2197) V2198) ((and (shen.+string? V2197) (and (= "~" (pos V2197 0)) (and (shen.+string? (tlstr V2197)) (= "A" (pos (tlstr V2197) 0))))) (cn V2198 (shen.app V2196 (tlstr (tlstr V2197)) shen.a))) ((and (shen.+string? V2197) (and (= "~" (pos V2197 0)) (and (shen.+string? (tlstr V2197)) (= "R" (pos (tlstr V2197) 0))))) (cn V2198 (shen.app V2196 (tlstr (tlstr V2197)) shen.r))) ((and (shen.+string? V2197) (and (= "~" (pos V2197 0)) (and (shen.+string? (tlstr V2197)) (= "S" (pos (tlstr V2197) 0))))) (cn V2198 (shen.app V2196 (tlstr (tlstr V2197)) shen.s))) ((shen.+string? V2197) (shen.insert-h V2196 (tlstr V2197) (cn V2198 (pos V2197 0)))) (true (shen.sys-error shen.insert-h))))

(defun shen.app (V2199 V2200 V2201) (cn (shen.arg->str V2199 V2201) V2200))

(defun shen.arg->str (V2207 V2208) (cond ((= V2207 (fail)) "...") ((shen.list? V2207) (shen.list->str V2207 V2208)) ((string? V2207) (shen.str->str V2207 V2208)) ((absvector? V2207) (shen.vector->str V2207 V2208)) (true (shen.atom->str V2207))))

(defun shen.list->str (V2209 V2210) (cond ((= shen.r V2210) (@s "(" (@s (shen.iter-list V2209 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V2209 V2210 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V2221 V2222 V2223) (cond ((= () V2221) "") ((= 0 V2223) "... etc") ((and (cons? V2221) (= () (tl V2221))) (shen.arg->str (hd V2221) V2222)) ((cons? V2221) (@s (shen.arg->str (hd V2221) V2222) (@s " " (shen.iter-list (tl V2221) V2222 (- V2223 1))))) (true (@s " " (@s "|" (@s " " (shen.arg->str V2221 V2222)))))))

(defun shen.str->str (V2228 V2229) (cond ((= shen.a V2229) V2228) (true (@s (n->string 34) (@s V2228 (n->string 34))))))

(defun shen.vector->str (V2230 V2231) (if (shen.print-vector? V2230) ((<-address V2230 0) V2230) (if (vector? V2230) (@s "<" (@s (shen.iter-vector V2230 1 V2231 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V2230 0 V2231 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V2232) (let Zero (<-address V2232 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V2233) (trap-error (do (ps V2233) true) (lambda E false)))

(defun shen.tuple (V2234) (cn "(@p " (shen.app (<-address V2234 1) (cn " " (shen.app (<-address V2234 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V2241 V2242 V2243 V2244) (cond ((= 0 V2244) "... etc") (true (let Item (trap-error (<-address V2241 V2242) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V2241 (+ V2242 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V2243) (@s (shen.arg->str Item V2243) (@s " " (shen.iter-vector V2241 (+ V2242 1) V2243 (- V2244 1)))))))))))

(defun shen.atom->str (V2245) (trap-error (str V2245) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V2246) (or (empty? V2246) (cons? V2246)))



