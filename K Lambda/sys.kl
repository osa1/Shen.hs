"**********************************************************************************
*                           The License						                                      *
* 										                                                                  *
* The user is free to produce commercial applications with the software, to 	          *
* distribute these applications in source or binary  form, and to charge monies         *
* for them as he sees fit and in concordance with the laws of the land subject 	        *
* to the following license.							                                                *
*										                                                                    * 
* 1. The license applies to all the software and all derived software and 	            *
*    must appear on such.							                                                  *
*										                                                                    *
* 2. It is illegal to distribute the software without this license attached	            *
*    to it and use of the software implies agreement with the license as such.          *
*    It is illegal for anyone who is not the copyright holder to tamper with 	          *
*    or change the license.							                                                *
*										                                                                    *
* 3. Neither the names of Lambda Associates or the copyright holder may be used         *
*    to endorse or promote products built using the software without specific 	        *
*    prior written permission from the copyright holder.		                            *
*										                                                                    *
* 4. That possession of this license does not confer on the copyright holder 	          *
*    any special contractual obligation towards the user. That in no event 	            * 
*    shall the copyright holder be liable for any direct, indirect, incidental,        *   
*    special, exemplary or consequential damages (including but not limited             *
*    to procurement of substitute goods or services, loss of use, data, 	              * 
*    interruption), however caused and on any theory of liability, whether in	          * 
*    contract, strict liability or tort (including negligence) arising in any         	*
*    way out of the use of the software, even if advised of the possibility of         	*
*    such damage.						                                                        		* 
*										                                                                    *
* 5. It is permitted for the user to change the software, for the purpose of 	          *
*    improving performance, correcting an error, or porting to a new platform, 	        *
*    and distribute the derived version of Shen provided the resulting program 	        *
*    conforms in all respects to the Shen standard and is issued under that             * 
*    title. The user must make it clear with his distribution that he/she is 	          *
*    the author of the changes and what these changes are and why. 		                  *
*										                                                                    *
* 6. Derived versions of this software in whatever form are subject to the same         *
*    restrictions. In particular it is not permitted to make derived copies of          *
*    this software which do not conform to the Shen standard or appear under a          *
*    different title.								                                                    *
*										                                                                    *
*    It is permitted to distribute versions of Shen which incorporate libraries,        *
*    graphics or other facilities which are not part of the Shen standard.	            *
*										                                                                    *
* For an explication of this license see www.shenlanguage.org/license.htm which         *
* explains this license in full.                                                        *
*				 						                                                                    *
*****************************************************************************************
"(defun thaw (V1782) (V1782))

(defun eval (V1783) (let Macroexpand (shen.walk (lambda V1780 (macroexpand V1780)) V1783) (if (shen.packaged? Macroexpand) (map shen.eval-without-macros (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))

(defun shen.eval-without-macros (V1784) (eval-kl (shen.elim-def (shen.proc-input+ V1784))))

(defun shen.proc-input+ (V1785) (cond ((and (cons? V1785) (and (= input+ (hd V1785)) (and (cons? (tl V1785)) (and (cons? (tl (tl V1785))) (= () (tl (tl (tl V1785)))))))) (cons input+ (cons (hd (tl V1785)) (cons (shen.rcons_form (hd (tl (tl V1785)))) ())))) ((and (cons? V1785) (and (= read+ (hd V1785)) (and (cons? (tl V1785)) (and (cons? (tl (tl V1785))) (= () (tl (tl (tl V1785)))))))) (cons read+ (cons (hd (tl V1785)) (cons (shen.rcons_form (hd (tl (tl V1785)))) ())))) ((cons? V1785) (map shen.proc-input+ V1785)) (true V1785)))

(defun shen.elim-def (V1786) (cond ((and (cons? V1786) (and (= define (hd V1786)) (cons? (tl V1786)))) (shen.shen->kl (hd (tl V1786)) (tl (tl V1786)))) ((and (cons? V1786) (and (= defmacro (hd V1786)) (cons? (tl V1786)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V1786)) (append (tl (tl V1786)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V1786))) Def)))) ((and (cons? V1786) (and (= defcc (hd V1786)) (cons? (tl V1786)))) (shen.elim-def (shen.yacc V1786))) ((cons? V1786) (map shen.elim-def V1786)) (true V1786)))

(defun shen.add-macro (V1787) (set *macros* (adjoin V1787 (value *macros*))))

(defun shen.packaged? (V1794) (cond ((and (cons? V1794) (and (= package (hd V1794)) (and (cons? (tl V1794)) (cons? (tl (tl V1794)))))) true) (true false)))

(defun external (V1795) (trap-error (get V1795 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V1795 " has not been used.
" shen.a))))))

(defun shen.package-contents (V1798) (cond ((and (cons? V1798) (and (= package (hd V1798)) (and (cons? (tl V1798)) (and (= null (hd (tl V1798))) (cons? (tl (tl V1798))))))) (tl (tl (tl V1798)))) ((and (cons? V1798) (and (= package (hd V1798)) (and (cons? (tl V1798)) (cons? (tl (tl V1798)))))) (shen.packageh (hd (tl V1798)) (hd (tl (tl V1798))) (tl (tl (tl V1798))))) (true (shen.sys-error shen.package-contents))))

(defun shen.walk (V1799 V1800) (cond ((cons? V1800) (V1799 (map (lambda Z (shen.walk V1799 Z)) V1800))) (true (V1799 V1800))))

(defun compile (V1801 V1802 V1803) (let O (V1801 (cons V1802 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V1803 O) (shen.hdtl O))))

(defun fail-if (V1804 V1805) (if (V1804 V1805) (fail) V1805))

(defun @s (V1806 V1807) (cn V1806 V1807))

(defun tc? () (value shen.*tc*))

(defun ps (V1808) (trap-error (get V1808 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V1808 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun shen.+vector? (V1809) (and (absvector? V1809) (> (<-address V1809 0) 0)))

(defun vector (V1810) (let Vector (absvector (+ V1810 1)) (let ZeroStamp (address-> Vector 0 V1810) (let Standard (if (= V1810 0) ZeroStamp (shen.fillvector ZeroStamp 1 V1810 (fail))) Standard))))

(defun shen.fillvector (V1811 V1812 V1813 V1814) (cond ((= V1813 V1812) (address-> V1811 V1813 V1814)) (true (shen.fillvector (address-> V1811 V1812 V1814) (+ 1 V1812) V1813 V1814))))

(defun vector? (V1816) (and (absvector? V1816) (trap-error (>= (<-address V1816 0) 0) (lambda E false))))

(defun vector-> (V1817 V1818 V1819) (if (= V1818 0) (simple-error "cannot access 0th element of a vector
") (address-> V1817 V1818 V1819)))

(defun <-vector (V1820 V1821) (if (= V1821 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V1820 V1821) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun shen.posint? (V1822) (and (integer? V1822) (>= V1822 0)))

(defun limit (V1823) (<-address V1823 0))

(defun symbol? (V1824) (cond ((or (boolean? V1824) (or (number? V1824) (string? V1824))) false) (true (trap-error (let String (str V1824) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V1825) (cond ((shen.+string? V1825) (and (shen.alpha? (pos V1825 0)) (shen.alphanums? (tlstr V1825)))) (true (shen.sys-error shen.analyse-symbol?))))

(defun shen.alpha? (V1826) (element? V1826 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.alphanums? (V1827) (cond ((= "" V1827) true) ((shen.+string? V1827) (and (shen.alphanum? (pos V1827 0)) (shen.alphanums? (tlstr V1827)))) (true (shen.sys-error shen.alphanums?))))

(defun shen.alphanum? (V1828) (or (shen.alpha? V1828) (shen.digit? V1828)))

(defun shen.digit? (V1829) (element? V1829 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))

(defun variable? (V1830) (cond ((or (boolean? V1830) (or (number? V1830) (string? V1830))) false) (true (trap-error (let String (str V1830) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V1831) (cond ((shen.+string? V1831) (and (shen.uppercase? (pos V1831 0)) (shen.alphanums? (tlstr V1831)))) (true (shen.sys-error shen.analyse-variable?))))

(defun shen.uppercase? (V1832) (element? V1832 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))

(defun gensym (V1833) (concat V1833 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V1834 V1835) (intern (cn (str V1834) (str V1835))))

(defun @p (V1836 V1837) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V1836) (let Snd (address-> Vector 2 V1837) Vector)))))

(defun fst (V1838) (<-address V1838 1))

(defun snd (V1839) (<-address V1839 2))

(defun tuple? (V1840) (trap-error (and (absvector? V1840) (= shen.tuple (<-address V1840 0))) (lambda E false)))

(defun append (V1841 V1842) (cond ((= () V1841) V1842) ((cons? V1841) (cons (hd V1841) (append (tl V1841) V1842))) (true (shen.sys-error append))))

(defun @v (V1843 V1844) (let Limit (limit V1844) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V1843) (if (= Limit 0) X+NewVector (shen.@v-help V1844 1 Limit X+NewVector))))))

(defun shen.@v-help (V1845 V1846 V1847 V1848) (cond ((= V1847 V1846) (shen.copyfromvector V1845 V1848 V1847 (+ V1847 1))) (true (shen.@v-help V1845 (+ V1846 1) V1847 (shen.copyfromvector V1845 V1848 V1846 (+ V1846 1))))))

(defun shen.copyfromvector (V1850 V1851 V1852 V1853) (trap-error (vector-> V1851 V1853 (<-vector V1850 V1852)) (lambda E V1851)))

(defun hdv (V1854) (trap-error (<-vector V1854 1) (lambda E (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V1854 "
" shen.s))))))

(defun tlv (V1855) (let Limit (limit V1855) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V1855 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V1856 V1857 V1858 V1859) (cond ((= V1858 V1857) (shen.copyfromvector V1856 V1859 V1858 (- V1858 1))) (true (shen.tlv-help V1856 (+ V1857 1) V1858 (shen.copyfromvector V1856 V1859 V1857 (- V1857 1))))))

(defun assoc (V1869 V1870) (cond ((= () V1870) ()) ((and (cons? V1870) (and (cons? (hd V1870)) (= (hd (hd V1870)) V1869))) (hd V1870)) ((cons? V1870) (assoc V1869 (tl V1870))) (true (shen.sys-error assoc))))

(defun boolean? (V1876) (cond ((= true V1876) true) ((= false V1876) true) (true false)))

(defun nl (V1877) (cond ((= 0 V1877) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V1877 1))))))

(defun difference (V1880 V1881) (cond ((= () V1880) ()) ((cons? V1880) (if (element? (hd V1880) V1881) (difference (tl V1880) V1881) (cons (hd V1880) (difference (tl V1880) V1881)))) (true (shen.sys-error difference))))

(defun do (V1882 V1883) V1883)

(defun element? (V1892 V1893) (cond ((= () V1893) false) ((and (cons? V1893) (= (hd V1893) V1892)) true) ((cons? V1893) (element? V1892 (tl V1893))) (true (shen.sys-error element?))))

(defun empty? (V1899) (cond ((= () V1899) true) (true false)))

(defun fix (V1900 V1901) (shen.fix-help V1900 V1901 (V1900 V1901)))

(defun shen.fix-help (V1908 V1909 V1910) (cond ((= V1910 V1909) V1910) (true (shen.fix-help V1908 V1910 (V1908 V1910)))))

(defun put (V1912 V1913 V1914 V1915) (let N (hash V1912 (limit V1915)) (let Entry (trap-error (<-vector V1915 N) (lambda E ())) (let Change (vector-> V1915 N (shen.change-pointer-value V1912 V1913 V1914 Entry)) V1914))))

(defun shen.change-pointer-value (V1918 V1919 V1920 V1921) (cond ((= () V1921) (cons (cons (cons V1918 (cons V1919 ())) V1920) ())) ((and (cons? V1921) (and (cons? (hd V1921)) (and (cons? (hd (hd V1921))) (and (cons? (tl (hd (hd V1921)))) (and (= () (tl (tl (hd (hd V1921))))) (and (= (hd (tl (hd (hd V1921)))) V1919) (= (hd (hd (hd V1921))) V1918))))))) (cons (cons (hd (hd V1921)) V1920) (tl V1921))) ((cons? V1921) (cons (hd V1921) (shen.change-pointer-value V1918 V1919 V1920 (tl V1921)))) (true (shen.sys-error shen.change-pointer-value))))

(defun get (V1924 V1925 V1926) (let N (hash V1924 (limit V1926)) (let Entry (trap-error (<-vector V1926 N) (lambda E (simple-error "pointer not found
"))) (let Result (assoc (cons V1924 (cons V1925 ())) Entry) (if (empty? Result) (simple-error "value not found
") (tl Result))))))

(defun hash (V1927 V1928) (let Hash (shen.mod (shen.sum (map (lambda V1781 (string->n V1781)) (explode V1927))) V1928) (if (= 0 Hash) 1 Hash)))

(defun shen.mod (V1929 V1930) (shen.modh V1929 (shen.multiples V1929 (cons V1930 ()))))

(defun shen.multiples (V1931 V1932) (cond ((and (cons? V1932) (> (hd V1932) V1931)) (tl V1932)) ((cons? V1932) (shen.multiples V1931 (cons (* 2 (hd V1932)) V1932))) (true (shen.sys-error shen.multiples))))

(defun shen.modh (V1935 V1936) (cond ((= 0 V1935) 0) ((= () V1936) V1935) ((and (cons? V1936) (> (hd V1936) V1935)) (if (empty? (tl V1936)) V1935 (shen.modh V1935 (tl V1936)))) ((cons? V1936) (shen.modh (- V1935 (hd V1936)) V1936)) (true (shen.sys-error shen.modh))))

(defun shen.sum (V1937) (cond ((= () V1937) 0) ((cons? V1937) (+ (hd V1937) (shen.sum (tl V1937)))) (true (shen.sys-error shen.sum))))

(defun head (V1944) (cond ((cons? V1944) (hd V1944)) (true (simple-error "head expects a non-empty list"))))

(defun tail (V1951) (cond ((cons? V1951) (tl V1951)) (true (simple-error "tail expects a non-empty list"))))

(defun hdstr (V1952) (pos V1952 0))

(defun intersection (V1955 V1956) (cond ((= () V1955) ()) ((cons? V1955) (if (element? (hd V1955) V1956) (cons (hd V1955) (intersection (tl V1955) V1956)) (intersection (tl V1955) V1956))) (true (shen.sys-error intersection))))

(defun reverse (V1957) (shen.reverse_help V1957 ()))

(defun shen.reverse_help (V1958 V1959) (cond ((= () V1958) V1959) ((cons? V1958) (shen.reverse_help (tl V1958) (cons (hd V1958) V1959))) (true (shen.sys-error shen.reverse_help))))

(defun union (V1960 V1961) (cond ((= () V1960) V1961) ((cons? V1960) (if (element? (hd V1960) V1961) (union (tl V1960) V1961) (cons (hd V1960) (union (tl V1960) V1961)))) (true (shen.sys-error union))))

(defun y-or-n? (V1962) (let Message (shen.prhush (shen.proc-nl V1962) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (input) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V1962))))))))

(defun not (V1963) (if V1963 false true))

(defun subst (V1972 V1973 V1974) (cond ((= V1974 V1973) V1972) ((cons? V1974) (cons (subst V1972 V1973 (hd V1974)) (subst V1972 V1973 (tl V1974)))) (true V1974)))

(defun explode (V1976) (shen.explode-h (shen.app V1976 "" shen.a)))

(defun shen.explode-h (V1977) (cond ((= "" V1977) ()) ((shen.+string? V1977) (cons (pos V1977 0) (shen.explode-h (tlstr V1977)))) (true (shen.sys-error shen.explode-h))))

(defun cd (V1978) (set *home-directory* (if (= V1978 "") "" (shen.app V1978 "/" shen.a))))

(defun map (V1979 V1980) (shen.map-h V1979 V1980 ()))

(defun shen.map-h (V1983 V1984 V1985) (cond ((= () V1984) (reverse V1985)) ((cons? V1984) (shen.map-h V1983 (tl V1984) (cons (V1983 (hd V1984)) V1985))) (true (shen.sys-error shen.map-h))))

(defun length (V1986) (shen.length-h V1986 0))

(defun shen.length-h (V1987 V1988) (cond ((= () V1987) V1988) (true (shen.length-h (tl V1987) (+ V1988 1)))))

(defun occurrences (V1997 V1998) (cond ((= V1998 V1997) 1) ((cons? V1998) (+ (occurrences V1997 (hd V1998)) (occurrences V1997 (tl V1998)))) (true 0)))

(defun nth (V2006 V2007) (cond ((and (= 1 V2006) (cons? V2007)) (hd V2007)) ((cons? V2007) (nth (- V2006 1) (tl V2007))) (true (shen.sys-error nth))))

(defun integer? (V2008) (and (number? V2008) (let Abs (shen.abs V2008) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V2009) (if (> V2009 0) V2009 (- 0 V2009)))

(defun shen.magless (V2010 V2011) (let Nx2 (* V2011 2) (if (> Nx2 V2010) V2011 (shen.magless V2010 Nx2))))

(defun shen.integer-test? (V2015 V2016) (cond ((= 0 V2015) true) ((> 1 V2015) false) (true (let Abs-N (- V2015 V2016) (if (> 0 Abs-N) (integer? V2015) (shen.integer-test? Abs-N V2016))))))

(defun mapcan (V2019 V2020) (cond ((= () V2020) ()) ((cons? V2020) (append (V2019 (hd V2020)) (mapcan V2019 (tl V2020)))) (true (shen.sys-error mapcan))))

(defun read-file-as-bytelist (V2021) (let Stream (open file V2021 in) (let Byte (read-byte Stream) (let Bytes (shen.read-file-as-bytelist-help Stream Byte ()) (let Close (close Stream) (reverse Bytes))))))

(defun shen.read-file-as-bytelist-help (V2022 V2023 V2024) (cond ((= -1 V2023) V2024) (true (shen.read-file-as-bytelist-help V2022 (read-byte V2022) (cons V2023 V2024)))))

(defun read-file-as-string (V2025) (let Stream (open file V2025 in) (shen.rfas-h Stream (read-byte Stream) "")))

(defun shen.rfas-h (V2026 V2027 V2028) (cond ((= -1 V2027) (do (close V2026) V2028)) (true (shen.rfas-h V2026 (read-byte V2026) (cn V2028 (n->string V2027))))))

(defun == (V2037 V2038) (cond ((= V2038 V2037) true) (true false)))

(defun abort () (simple-error ""))

(defun read () (hd (lineread)))

(defun input () (eval (read)))

(defun input+ (V2044 V2045) (let Input (read) (let Check (shen.typecheck Input V2045) (if (= false Check) (do (shen.prhush (cn "input is not of type " (shen.app V2045 ": please re-enter " shen.r)) (stoutput)) (input+ : V2045)) (eval Input)))))

(defun read+ (V2050 V2051) (let Input (read) (let Check (shen.typecheck (shen.rcons_form Input) V2051) (if (= false Check) (do (shen.prhush (cn "input is not of type " (shen.app V2051 ": please re-enter " shen.r)) (stoutput)) (read+ : V2051)) Input))))

(defun bound? (V2052) (and (symbol? V2052) (let Val (trap-error (value V2052) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V2053) (cond ((= "" V2053) ()) (true (cons (string->n (pos V2053 0)) (shen.string->bytes (tlstr V2053))))))

(defun maxinferences (V2054) (set shen.*maxinferences* V2054))

(defun inferences () (value shen.*infs*))

(defun protect (V2055) V2055)

(defun stoutput () (value *stoutput*))

(defun string->symbol (V2056) (let Symbol (intern V2056) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V2056 " to a symbol" shen.s))))))

(defun shen.optimise (V2061) (cond ((= + V2061) (set shen.*optimise* true)) ((= - V2061) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))



